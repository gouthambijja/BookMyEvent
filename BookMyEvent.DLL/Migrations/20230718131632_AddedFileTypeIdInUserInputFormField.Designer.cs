// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using db.Models;

#nullable disable

namespace BookMyEvent.DLL.Migrations
{
    [DbContext(typeof(EventManagementSystemTeamZealContext))]
    [Migration("20230718131632_AddedFileTypeIdInUserInputFormField")]
    partial class AddedFileTypeIdInUserInputFormField
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookMyEvent.DLL.Models.FileType", b =>
                {
                    b.Property<byte>("FileTypeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("FileTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FileTypeId");

                    b.ToTable("FileTypes");
                });

            modelBuilder.Entity("db.Models.AccountCredential", b =>
                {
                    b.Property<Guid>("AccountCredentialsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("AccountCredentialsId")
                        .HasName("PK__AccountC__8537A84B61ED7E9E");

                    b.ToTable("AccountCredentials");
                });

            modelBuilder.Entity("db.Models.Administration", b =>
                {
                    b.Property<Guid>("AdministratorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("AcceptedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountCredentialsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdministratorAddress")
                        .IsRequired()
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("AdministratorName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("GoogleId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ImageName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<byte[]>("ImgBody")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool?>("IsAccepted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.Property<Guid?>("RejectedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RejectedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("RoleId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("AdministratorId")
                        .HasName("PK__Administ__ACDEFED343AA4E48");

                    b.HasIndex("AcceptedBy");

                    b.HasIndex("AccountCredentialsId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("RejectedBy");

                    b.HasIndex("RoleId");

                    b.ToTable("Administration", (string)null);
                });

            modelBuilder.Entity("db.Models.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("AcceptedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AvailableSeats")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((-1))");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<byte>("CategoryId")
                        .HasColumnType("tinyint");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("EventEndingPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("EventStartingPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.Property<byte>("MaxNoOfTicketsPerTransaction")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ProfileImgBody")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte>("RegistrationStatusId")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("RejectedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RejectedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("RejectedReason")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("EventId")
                        .HasName("PK__Events__7944C81054279AF9");

                    b.HasIndex("AcceptedBy");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FormId");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("RegistrationStatusId");

                    b.HasIndex("RejectedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("db.Models.EventCategory", b =>
                {
                    b.Property<byte>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("CategoryId")
                        .HasName("PK__EventCat__19093A0BB8F2E5D2");

                    b.ToTable("EventCategories");
                });

            modelBuilder.Entity("db.Models.EventImage", b =>
                {
                    b.Property<Guid>("ImgId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ImgBody")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImgName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ImgType")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ImgId")
                        .HasName("PK__EventIma__352F54F36BDC329E");

                    b.HasIndex("EventId");

                    b.ToTable("EventImages");
                });

            modelBuilder.Entity("db.Models.FieldType", b =>
                {
                    b.Property<byte>("FieldTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("FieldTypeId"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("FieldTypeId")
                        .HasName("PK__FieldTyp__74418AE297847293");

                    b.ToTable("FieldTypes");
                });

            modelBuilder.Entity("db.Models.Form", b =>
                {
                    b.Property<Guid>("FormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FormName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FormId")
                        .HasName("PK__Forms__FB05B7DD5A5ADCFC");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("db.Models.Organisation", b =>
                {
                    b.Property<Guid>("OrganisationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(512)
                        .IsUnicode(false)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("OrganisationDescription")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("OrganisationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("OrganisationId")
                        .HasName("PK__Organisa__722346DC26169D2A");

                    b.HasIndex(new[] { "OrganisationName" }, "UQ__Organisa__1B62E33DBBDA62E6")
                        .IsUnique();

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("db.Models.RegistrationFormField", b =>
                {
                    b.Property<Guid>("RegistrationFormFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<byte>("FieldTypeId")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("FileTypeId")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsRequired")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Lable")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Options")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Validations")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("RegistrationFormFieldId")
                        .HasName("PK__Registra__6823EFDD4809FA0A");

                    b.HasIndex("FieldTypeId");

                    b.HasIndex("FileTypeId");

                    b.HasIndex("FormId");

                    b.ToTable("RegistrationFormFields");
                });

            modelBuilder.Entity("db.Models.RegistrationStatus", b =>
                {
                    b.Property<byte>("RegistrationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("RegistrationStatusId"));

                    b.Property<string>("RegStatus")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("RegistrationStatusId")
                        .HasName("PK__Registra__17166AA51651A11A");

                    b.ToTable("RegistrationStatus", (string)null);
                });

            modelBuilder.Entity("db.Models.Role", b =>
                {
                    b.Property<byte>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("RoleId")
                        .HasName("PK__Roles__8AFACE1A65D1B1F5");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("db.Models.Ticket", b =>
                {
                    b.Property<Guid>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsCancelled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserInputFormId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TicketId")
                        .HasName("PK__Tickets__712CC607296FFC27");

                    b.HasIndex("EventId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("UserInputFormId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("db.Models.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("AdministratorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<int>("NoOfTickets")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TransactionTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TransactionId")
                        .HasName("PK__Transact__55433A6B86BD076C");

                    b.HasIndex("AdministratorId");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("db.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("AccountCredentialsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("GoogleId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ImageName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<byte[]>("ImgBody")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CC4C7FDE0DA1");

                    b.HasIndex("AccountCredentialsId");

                    b.HasIndex("DeletedBy");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D10534B14A2F5D")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("db.Models.UserInputForm", b =>
                {
                    b.Property<Guid>("UserInputFormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdministratorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserInputFormId")
                        .HasName("PK__UserInpu__A2369B98D4D521DB");

                    b.HasIndex("AdministratorId");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("UserInputForm", (string)null);
                });

            modelBuilder.Entity("db.Models.UserInputFormField", b =>
                {
                    b.Property<Guid>("UserInputFormFieldid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateResponse")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("FileResponse")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte?>("FileTypeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("NumberResponse")
                        .HasColumnType("int");

                    b.Property<Guid>("RegistrationFormFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StringResponse")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<Guid>("UserInputFormId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserInputFormFieldid")
                        .HasName("PK__UserInpu__AC5D3622FE397643");

                    b.HasIndex("RegistrationFormFieldId");

                    b.HasIndex("UserInputFormId");

                    b.ToTable("UserInputFormFields");
                });

            modelBuilder.Entity("db.Models.Administration", b =>
                {
                    b.HasOne("db.Models.Administration", "AcceptedByNavigation")
                        .WithMany("InverseAcceptedByNavigation")
                        .HasForeignKey("AcceptedBy")
                        .HasConstraintName("FK__Administr__Accep__36B12243");

                    b.HasOne("db.Models.AccountCredential", "AccountCredentials")
                        .WithMany("Administrations")
                        .HasForeignKey("AccountCredentialsId")
                        .HasConstraintName("FK_ADMINISTRATION_AccountCredentialsID");

                    b.HasOne("db.Models.Administration", "CreatedByNavigation")
                        .WithMany("InverseCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__Administr__Creat__34C8D9D1");

                    b.HasOne("db.Models.Administration", "DeletedByNavigation")
                        .WithMany("InverseDeletedByNavigation")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK__Administr__Delet__3A81B327");

                    b.HasOne("db.Models.Organisation", "Organisation")
                        .WithMany("Administrations")
                        .HasForeignKey("OrganisationId")
                        .IsRequired()
                        .HasConstraintName("FK_ORGANISATIONID");

                    b.HasOne("db.Models.Administration", "RejectedByNavigation")
                        .WithMany("InverseRejectedByNavigation")
                        .HasForeignKey("RejectedBy")
                        .HasConstraintName("FK__Administr__Rejec__38996AB5");

                    b.HasOne("db.Models.Role", "Role")
                        .WithMany("Administrations")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_ROLEID");

                    b.Navigation("AcceptedByNavigation");

                    b.Navigation("AccountCredentials");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("DeletedByNavigation");

                    b.Navigation("Organisation");

                    b.Navigation("RejectedByNavigation");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("db.Models.Event", b =>
                {
                    b.HasOne("db.Models.Administration", "AcceptedByNavigation")
                        .WithMany("EventAcceptedByNavigations")
                        .HasForeignKey("AcceptedBy")
                        .HasConstraintName("FK_EVENTS_ACCEPTEDBY");

                    b.HasOne("db.Models.EventCategory", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_EVENTS_CATEGORYID");

                    b.HasOne("db.Models.Administration", "CreatedByNavigation")
                        .WithMany("EventCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_EVENTS_CREATEDBY");

                    b.HasOne("db.Models.Form", "Form")
                        .WithMany("Events")
                        .HasForeignKey("FormId")
                        .IsRequired()
                        .HasConstraintName("FK_EVENTS_FORMID");

                    b.HasOne("db.Models.Organisation", "Organisation")
                        .WithMany("Events")
                        .HasForeignKey("OrganisationId")
                        .IsRequired()
                        .HasConstraintName("FK_EVENTS_ORGANISATIONID");

                    b.HasOne("db.Models.RegistrationStatus", "RegistrationStatus")
                        .WithMany("Events")
                        .HasForeignKey("RegistrationStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_EVENTS_REGISTRATIONSTATUSID");

                    b.HasOne("db.Models.Administration", "RejectedByNavigation")
                        .WithMany("EventRejectedByNavigations")
                        .HasForeignKey("RejectedBy")
                        .HasConstraintName("FK_EVENTS_REJECTEDBY");

                    b.HasOne("db.Models.Administration", "UpdatedByNavigation")
                        .WithMany("EventUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK_EVENTS_UPDATEDBY");

                    b.Navigation("AcceptedByNavigation");

                    b.Navigation("Category");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Form");

                    b.Navigation("Organisation");

                    b.Navigation("RegistrationStatus");

                    b.Navigation("RejectedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("db.Models.EventImage", b =>
                {
                    b.HasOne("db.Models.Event", "Event")
                        .WithMany("EventImages")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_Img_EventID_Events");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("db.Models.Form", b =>
                {
                    b.HasOne("db.Models.Administration", "CreatedByNavigation")
                        .WithMany("Forms")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_createrId");

                    b.HasOne("db.Models.Organisation", "Organisation")
                        .WithMany("Forms")
                        .HasForeignKey("OrganisationId")
                        .IsRequired()
                        .HasConstraintName("FK_orgId");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("db.Models.RegistrationFormField", b =>
                {
                    b.HasOne("db.Models.FieldType", "FieldType")
                        .WithMany("RegistrationFormFields")
                        .HasForeignKey("FieldTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_fieldId");

                    b.HasOne("BookMyEvent.DLL.Models.FileType", "FileType")
                        .WithMany("RegistrationFormFields")
                        .HasForeignKey("FileTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_FileTypeId_FileType");

                    b.HasOne("db.Models.Form", "Form")
                        .WithMany("RegistrationFormFields")
                        .HasForeignKey("FormId")
                        .IsRequired()
                        .HasConstraintName("FK_formId");

                    b.Navigation("FieldType");

                    b.Navigation("FileType");

                    b.Navigation("Form");
                });

            modelBuilder.Entity("db.Models.Ticket", b =>
                {
                    b.HasOne("db.Models.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_Tickets_Events");

                    b.HasOne("db.Models.Transaction", "Transaction")
                        .WithMany("Tickets")
                        .HasForeignKey("TransactionId")
                        .IsRequired()
                        .HasConstraintName("FK_Tickets_Transactions");

                    b.HasOne("db.Models.UserInputForm", "UserInputForm")
                        .WithMany("Tickets")
                        .HasForeignKey("UserInputFormId")
                        .IsRequired()
                        .HasConstraintName("FK_UserInputFormId_UserInputForm");

                    b.Navigation("Event");

                    b.Navigation("Transaction");

                    b.Navigation("UserInputForm");
                });

            modelBuilder.Entity("db.Models.Transaction", b =>
                {
                    b.HasOne("db.Models.Administration", "Administration")
                        .WithMany("Transactions")
                        .HasForeignKey("AdministratorId")
                        .HasConstraintName("FK_Transactions_Administrators");

                    b.HasOne("db.Models.Event", "Event")
                        .WithMany("Transactions")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_Transactions_Events");

                    b.HasOne("db.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Transactions_Users");

                    b.Navigation("Administration");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("db.Models.User", b =>
                {
                    b.HasOne("db.Models.AccountCredential", "AccountCredentials")
                        .WithMany("Users")
                        .HasForeignKey("AccountCredentialsId")
                        .HasConstraintName("FK_USERS_AccountCredentialsID");

                    b.HasOne("db.Models.Administration", "DeletedByNavigation")
                        .WithMany("Users")
                        .HasForeignKey("DeletedBy")
                        .HasConstraintName("FK_USERS_ADMINISTRATORID");

                    b.Navigation("AccountCredentials");

                    b.Navigation("DeletedByNavigation");
                });

            modelBuilder.Entity("db.Models.UserInputForm", b =>
                {
                    b.HasOne("db.Models.Administration", "Administration")
                        .WithMany("UserInputForms")
                        .HasForeignKey("AdministratorId")
                        .HasConstraintName("FK_ADMINISTRATORID_ADMINISTRATION");

                    b.HasOne("db.Models.Event", "Event")
                        .WithMany("UserInputForms")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_EVENTID_EVENTS");

                    b.HasOne("db.Models.User", "User")
                        .WithMany("UserInputForms")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserID_Users");

                    b.Navigation("Administration");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("db.Models.UserInputFormField", b =>
                {
                    b.HasOne("db.Models.RegistrationFormField", "RegistrationFormField")
                        .WithMany("UserInputFormFields")
                        .HasForeignKey("RegistrationFormFieldId")
                        .IsRequired()
                        .HasConstraintName("FK_RegistrationFormFieldId_RegistrationFormFields");

                    b.HasOne("db.Models.UserInputForm", "UserInputForm")
                        .WithMany("UserInputFormFields")
                        .HasForeignKey("UserInputFormId")
                        .IsRequired()
                        .HasConstraintName("FK_UserInputFormIdd_UserInputForm");

                    b.Navigation("RegistrationFormField");

                    b.Navigation("UserInputForm");
                });

            modelBuilder.Entity("BookMyEvent.DLL.Models.FileType", b =>
                {
                    b.Navigation("RegistrationFormFields");
                });

            modelBuilder.Entity("db.Models.AccountCredential", b =>
                {
                    b.Navigation("Administrations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("db.Models.Administration", b =>
                {
                    b.Navigation("EventAcceptedByNavigations");

                    b.Navigation("EventCreatedByNavigations");

                    b.Navigation("EventRejectedByNavigations");

                    b.Navigation("EventUpdatedByNavigations");

                    b.Navigation("Forms");

                    b.Navigation("InverseAcceptedByNavigation");

                    b.Navigation("InverseCreatedByNavigation");

                    b.Navigation("InverseDeletedByNavigation");

                    b.Navigation("InverseRejectedByNavigation");

                    b.Navigation("Transactions");

                    b.Navigation("UserInputForms");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("db.Models.Event", b =>
                {
                    b.Navigation("EventImages");

                    b.Navigation("Tickets");

                    b.Navigation("Transactions");

                    b.Navigation("UserInputForms");
                });

            modelBuilder.Entity("db.Models.EventCategory", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("db.Models.FieldType", b =>
                {
                    b.Navigation("RegistrationFormFields");
                });

            modelBuilder.Entity("db.Models.Form", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("RegistrationFormFields");
                });

            modelBuilder.Entity("db.Models.Organisation", b =>
                {
                    b.Navigation("Administrations");

                    b.Navigation("Events");

                    b.Navigation("Forms");
                });

            modelBuilder.Entity("db.Models.RegistrationFormField", b =>
                {
                    b.Navigation("UserInputFormFields");
                });

            modelBuilder.Entity("db.Models.RegistrationStatus", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("db.Models.Role", b =>
                {
                    b.Navigation("Administrations");
                });

            modelBuilder.Entity("db.Models.Transaction", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("db.Models.User", b =>
                {
                    b.Navigation("Transactions");

                    b.Navigation("UserInputForms");
                });

            modelBuilder.Entity("db.Models.UserInputForm", b =>
                {
                    b.Navigation("Tickets");

                    b.Navigation("UserInputFormFields");
                });
#pragma warning restore 612, 618
        }
    }
}
